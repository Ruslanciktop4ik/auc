from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from logic import *
import schedule
import threading
import time
from config import *
import os

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs('img', exist_ok=True)
os.makedirs('hidden_img', exist_ok=True)

bot = TeleBot(API_TOKEN)
manager = DatabaseManager(DATABASE)
manager.create_tables()

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å!"
def gen_markup(id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å!", callback_data=str(id)))
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å!"
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        prize_id = int(call.data)
        user_id = call.message.chat.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–∏–∑
        if manager.add_winner(user_id, prize_id):
            img = manager.get_prize_img(prize_id)
            if img:
                with open(f'img/{img}', 'rb') as photo:
                    bot.send_photo(user_id, photo, caption="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ–ª –ø–µ—Ä–≤—ã–º üéâ")
            else:
                bot.send_message(user_id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(user_id, "–£–≤—ã! –ü—Ä–∏–∑ —É–∂–µ –∑–∞–±—Ä–∞–ª–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_query: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
def send_message():
    prize = manager.get_random_prize()
    if not prize:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.")
        return

    prize_id, img = prize[:2]
    manager.mark_prize_used(prize_id)
    hide_img(img)

    winners_sent = 0
    for user in manager.get_users():
        if winners_sent >= 3:
            break
        try:
            with open(f'hidden_img/{img}', 'rb') as photo:
                bot.send_photo(user, photo, reply_markup=gen_markup(prize_id))
                winners_sent += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

# –ü–æ—Ç–æ–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedule_thread():
    schedule.every().second.do(send_message)  # –ú–µ–Ω—è–π –Ω–∞ every().second –¥–ª—è —Ç–µ—Å—Ç–∞
    while True:
        schedule.run_pending()
        time.sleep(1)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    if user_id in manager.get_users():
        bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        manager.add_user(user_id, message.from_user.username)
        bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!
–ö–∞–∂–¥—ã–π —á–∞—Å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç —à–∞–Ω—Å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!
–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å!'

–¢–æ–ª—å–∫–æ —Ç—Ä–∏ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É!""")

# –ü–æ—Ç–æ–∫ –±–æ—Ç–∞
def polling_thread():
    bot.polling(none_stop=True)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    polling_thread = threading.Thread(target=polling_thread)
    polling_schedule = threading.Thread(target=schedule_thread)

    polling_thread.start()
    polling_schedule.start()